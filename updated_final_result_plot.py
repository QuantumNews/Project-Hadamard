# -*- coding: utf-8 -*-
"""updated final result plot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-pa0XbMDUiQUpOtNwhECM_mlj-yrLon4
"""

import matplotlib.pyplot as plt
import numpy as np
import base64
import json
import io


def run(payload):
    print("> data postprocessing")

    buffer = io.BytesIO()
    results = [
        dict(
            mean=json.loads(result['mean']),
            data=json.loads(result['data']),
            covariance_matrix=json.loads(result['covariance_matrix'])
        )
        for result in payload['results']
    ]

    num_runs = len(results)
    min_risk = payload.get("minRiskAversion") or 0.1
    max_risk = payload.get("maxRiskAversion") or 100

    alpha_values = np.linspace(min_risk, max_risk, num_runs)
    print(alpha_values, "<<<")

    # Initialize renderer
    plt.title('Sharpe ratio vs. risk-free rate')
    plt.xlabel('Risk-free rate')
    plt.ylabel('Sharpe ratio')
    plt.figure()

    for index, result in enumerate(results, start=0):
    data = result['data']
    mean = result['mean']
    covariance_matrix = np.asarray(result['covariance_matrix'])

    # get solution from data for current run
    solution = data['sample_data']['data'][index]

    # convert each integer to binary
    binary_sol = [bin(x)[2:] for x in solution]

    # pad with zeros to match the number of variables
    num_vars = 81
    padded_sol = [x.zfill(num_vars) for x in binary_sol]

    # match binary digits to variable labels
    var_labels = ['x[{}][{}]'.format(i,j) for i in range(9) for j in range(9)]
    sol_dict = {var_labels[i]: int(padded_sol[0][i]) for i in range(num_vars)[-9:]}

    # Calculate the portfolio return
    weights = np.array(list(sol_dict.values())).flatten()
    portfolio_return = np.dot(weights, mean) * 9  # Annualize the return

    # Calculate the portfolio volatility
    portfolio_variance = np.dot(weights, np.dot(covariance_matrix, weights))
    portfolio_volatility = np.sqrt(portfolio_variance) * np.sqrt(9)  # Annualize the volatility

    # Calculate the Sharpe ratio
    risk_free_rate = 0.02  # Assume a risk-free rate of 2%
    sharpe_ratio = (portfolio_return - risk_free_rate) / portfolio_volatility*-40000

    # Render graph
    plt.scatter(alpha_values[index], sharpe_ratio)